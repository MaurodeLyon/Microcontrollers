
GhettoGochi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000422  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800130  00800130  000004e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000691  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ae  00000000  00000000  00000c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056e  00000000  00000000  00000f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000262  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f3  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001b75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	7b c1       	rjmp	.+758    	; 0x30c <__vector_5>
  16:	00 00       	nop
  18:	94 c1       	rjmp	.+808    	; 0x342 <__vector_6>
  1a:	00 00       	nop
  1c:	9c c1       	rjmp	.+824    	; 0x356 <__vector_7>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	a0 c1       	rjmp	.+832    	; 0x36a <__vector_10>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e5 00       	.word	0x00e5	; ????
  8e:	e5 00       	.word	0x00e5	; ????
  90:	ee 00       	.word	0x00ee	; ????
  92:	f7 00       	.word	0x00f7	; ????
  94:	00 01       	movw	r0, r0
  96:	09 01       	movw	r0, r18
  98:	12 01       	movw	r2, r4
  9a:	1b 01       	movw	r2, r22
  9c:	24 01       	movw	r4, r8
  9e:	2d 01       	movw	r4, r26
  a0:	36 01       	movw	r6, r12
  a2:	3f 01       	movw	r6, r30
  a4:	48 01       	movw	r8, r16
  a6:	51 01       	movw	r10, r2
  a8:	5a 01       	movw	r10, r20
  aa:	63 01       	movw	r12, r6
  ac:	6c 01       	movw	r12, r24

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e1       	ldi	r29, 0x10	; 16
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e2 e2       	ldi	r30, 0x22	; 34
  c2:	f4 e0       	ldi	r31, 0x04	; 4
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a0 33       	cpi	r26, 0x30	; 48
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a0 e3       	ldi	r26, 0x30	; 48
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a8 33       	cpi	r26, 0x38	; 56
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	70 d1       	rcall	.+736    	; 0x3c6 <main>
  e6:	9b c1       	rjmp	.+822    	; 0x41e <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <twi_init>:
	while( 0 == (TWCR & 0x80) );
}

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  ea:	10 92 71 00 	sts	0x0071, r1
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	80 93 70 00 	sts	0x0070, r24
  f4:	08 95       	ret

000000f6 <twi_start>:
  f6:	84 ea       	ldi	r24, 0xA4	; 164
  f8:	80 93 74 00 	sts	0x0074, r24
  fc:	e4 e7       	ldi	r30, 0x74	; 116
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <twi_start+0xa>
 106:	08 95       	ret

00000108 <twi_tx>:
 108:	80 93 73 00 	sts	0x0073, r24
 10c:	84 e8       	ldi	r24, 0x84	; 132
 10e:	80 93 74 00 	sts	0x0074, r24
 112:	e4 e7       	ldi	r30, 0x74	; 116
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	ec f7       	brge	.-6      	; 0x116 <twi_tx+0xe>
 11c:	08 95       	ret

0000011e <transmit>:
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

void transmit(unsigned char data)
{
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
	twi_start();
 122:	e9 df       	rcall	.-46     	; 0xf6 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 124:	80 ee       	ldi	r24, 0xE0	; 224
 126:	f0 df       	rcall	.-32     	; 0x108 <twi_tx>
	twi_tx(data);	// transmit data
 128:	8c 2f       	mov	r24, r28
 12a:	ee df       	rcall	.-36     	; 0x108 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 12c:	84 e9       	ldi	r24, 0x94	; 148
 12e:	80 93 74 00 	sts	0x0074, r24
{
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(data);	// transmit data
	twi_stop();
}
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <clear>:

void clear()
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	twi_start();
 13a:	dd df       	rcall	.-70     	; 0xf6 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 13c:	80 ee       	ldi	r24, 0xE0	; 224
 13e:	e4 df       	rcall	.-56     	; 0x108 <twi_tx>
 140:	c8 e0       	ldi	r28, 0x08	; 8
 142:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0 ; i < 8; i=i+1)
	{
		twi_tx(0x00);	// Address
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	e0 df       	rcall	.-64     	; 0x108 <twi_tx>
		twi_tx(0x00);	// data
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	de df       	rcall	.-68     	; 0x108 <twi_tx>
 14c:	21 97       	sbiw	r28, 0x01	; 1

void clear()
{
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	for(int i = 0 ; i < 8; i=i+1)
 14e:	d1 f7       	brne	.-12     	; 0x144 <clear+0xe>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 150:	84 e9       	ldi	r24, 0x94	; 148
 152:	80 93 74 00 	sts	0x0074, r24
	{
		twi_tx(0x00);	// Address
		twi_tx(0x00);	// data
	}
	twi_stop();
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <draw>:

void draw(int data[])
{
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	7c 01       	movw	r14, r24
	if(prev != data){
 16a:	80 91 30 01 	lds	r24, 0x0130
 16e:	90 91 31 01 	lds	r25, 0x0131
 172:	e8 16       	cp	r14, r24
 174:	f9 06       	cpc	r15, r25
 176:	99 f0       	breq	.+38     	; 0x19e <draw+0x42>
		clear();
 178:	de df       	rcall	.-68     	; 0x136 <clear>
		twi_start();
 17a:	bd df       	rcall	.-134    	; 0xf6 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 17c:	80 ee       	ldi	r24, 0xE0	; 224
 17e:	c4 df       	rcall	.-120    	; 0x108 <twi_tx>
 180:	e7 01       	movw	r28, r14
 182:	87 01       	movw	r16, r14
 184:	00 5f       	subi	r16, 0xF0	; 240
 186:	1f 4f       	sbci	r17, 0xFF	; 255
		for(int i = 0 ; i < 8; i = i + 1){
			twi_tx(0x00);		// Address
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	be df       	rcall	.-132    	; 0x108 <twi_tx>
			twi_tx(data[i]);	// data
 18c:	88 81       	ld	r24, Y
 18e:	22 96       	adiw	r28, 0x02	; 2
 190:	bb df       	rcall	.-138    	; 0x108 <twi_tx>
{
	if(prev != data){
		clear();
		twi_start();
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		for(int i = 0 ; i < 8; i = i + 1){
 192:	c0 17       	cp	r28, r16
 194:	d1 07       	cpc	r29, r17
 196:	c1 f7       	brne	.-16     	; 0x188 <draw+0x2c>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 198:	84 e9       	ldi	r24, 0x94	; 148
 19a:	80 93 74 00 	sts	0x0074, r24
			twi_tx(0x00);		// Address
			twi_tx(data[i]);	// data
		}
		twi_stop();
	}
	prev = data;
 19e:	f0 92 31 01 	sts	0x0131, r15
 1a2:	e0 92 30 01 	sts	0x0130, r14
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <check>:

#define BIT(x) ( 1<<x );
int overflow;
void check()
{
	switch (status)
 1b4:	e0 91 36 01 	lds	r30, 0x0136
 1b8:	f0 91 37 01 	lds	r31, 0x0137
 1bc:	e1 31       	cpi	r30, 0x11	; 17
 1be:	f1 05       	cpc	r31, r1
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <check+0x10>
 1c2:	93 c0       	rjmp	.+294    	; 0x2ea <check+0x136>
 1c4:	ea 5b       	subi	r30, 0xBA	; 186
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	21 c1       	rjmp	.+578    	; 0x40c <__tablejump2__>
	{
		case 0:
		smile = frown_bmp;
		case 1:
		smile = frown_bmp;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	90 93 33 01 	sts	0x0133, r25
 1d2:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11100000);	//Display Dimming 8/16 duty cycle
 1d6:	80 ee       	ldi	r24, 0xE0	; 224
 1d8:	a2 cf       	rjmp	.-188    	; 0x11e <transmit>
		break;
 1da:	08 95       	ret
		case 2:
		smile = frown_bmp;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	90 93 33 01 	sts	0x0133, r25
 1e4:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11100001);
 1e8:	81 ee       	ldi	r24, 0xE1	; 225
 1ea:	99 cf       	rjmp	.-206    	; 0x11e <transmit>
		break;
 1ec:	08 95       	ret
		case 3:
		smile = frown_bmp;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	90 93 33 01 	sts	0x0133, r25
 1f6:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11100010);
 1fa:	82 ee       	ldi	r24, 0xE2	; 226
 1fc:	90 cf       	rjmp	.-224    	; 0x11e <transmit>
		break;
 1fe:	08 95       	ret
		case 4:
		smile = frown_bmp;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	90 93 33 01 	sts	0x0133, r25
 208:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11100011);
 20c:	83 ee       	ldi	r24, 0xE3	; 227
 20e:	87 cf       	rjmp	.-242    	; 0x11e <transmit>
		break;
 210:	08 95       	ret
		case 5:
		smile = neutral_bmp;
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	90 93 33 01 	sts	0x0133, r25
 21a:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11100100);
 21e:	84 ee       	ldi	r24, 0xE4	; 228
 220:	7e cf       	rjmp	.-260    	; 0x11e <transmit>
		break;
 222:	08 95       	ret
		case 6:
		smile = neutral_bmp;
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	90 93 33 01 	sts	0x0133, r25
 22c:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11100101);
 230:	85 ee       	ldi	r24, 0xE5	; 229
 232:	75 cf       	rjmp	.-278    	; 0x11e <transmit>
		break;
 234:	08 95       	ret
		case 7:
		smile = neutral_bmp;
 236:	80 e1       	ldi	r24, 0x10	; 16
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	90 93 33 01 	sts	0x0133, r25
 23e:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11100110);
 242:	86 ee       	ldi	r24, 0xE6	; 230
 244:	6c cf       	rjmp	.-296    	; 0x11e <transmit>
		break;
 246:	08 95       	ret
		case 8:
		smile = neutral_bmp;
 248:	80 e1       	ldi	r24, 0x10	; 16
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	90 93 33 01 	sts	0x0133, r25
 250:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11100111);
 254:	87 ee       	ldi	r24, 0xE7	; 231
 256:	63 cf       	rjmp	.-314    	; 0x11e <transmit>
		break;
 258:	08 95       	ret
		case 9:
		smile = neutral_bmp;
 25a:	80 e1       	ldi	r24, 0x10	; 16
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	90 93 33 01 	sts	0x0133, r25
 262:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11101000);
 266:	88 ee       	ldi	r24, 0xE8	; 232
 268:	5a cf       	rjmp	.-332    	; 0x11e <transmit>
		break;
 26a:	08 95       	ret
		case 10:
		smile = smile_bmp;
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	90 93 33 01 	sts	0x0133, r25
 274:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11101001);
 278:	89 ee       	ldi	r24, 0xE9	; 233
 27a:	51 cf       	rjmp	.-350    	; 0x11e <transmit>
		break;
 27c:	08 95       	ret
		case 11:
		smile = smile_bmp;
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	90 93 33 01 	sts	0x0133, r25
 286:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11101010);
 28a:	8a ee       	ldi	r24, 0xEA	; 234
 28c:	48 cf       	rjmp	.-368    	; 0x11e <transmit>
		break;
 28e:	08 95       	ret
		case 12:
		smile = smile_bmp;
 290:	80 e2       	ldi	r24, 0x20	; 32
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	90 93 33 01 	sts	0x0133, r25
 298:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11101011);
 29c:	8b ee       	ldi	r24, 0xEB	; 235
 29e:	3f cf       	rjmp	.-386    	; 0x11e <transmit>
		break;
 2a0:	08 95       	ret
		case 13:
		smile = smile_bmp;
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	90 93 33 01 	sts	0x0133, r25
 2aa:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11101100);
 2ae:	8c ee       	ldi	r24, 0xEC	; 236
 2b0:	36 cf       	rjmp	.-404    	; 0x11e <transmit>
		break;
 2b2:	08 95       	ret
		case 14:
		smile = smile_bmp;
 2b4:	80 e2       	ldi	r24, 0x20	; 32
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	90 93 33 01 	sts	0x0133, r25
 2bc:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11101101);
 2c0:	8d ee       	ldi	r24, 0xED	; 237
 2c2:	2d cf       	rjmp	.-422    	; 0x11e <transmit>
		break;
 2c4:	08 95       	ret
		case 15:
		smile = smile_bmp;
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	90 93 33 01 	sts	0x0133, r25
 2ce:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11101110);
 2d2:	8e ee       	ldi	r24, 0xEE	; 238
 2d4:	24 cf       	rjmp	.-440    	; 0x11e <transmit>
		break;
 2d6:	08 95       	ret
		case 16:
		smile = smile_bmp;
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	90 93 33 01 	sts	0x0133, r25
 2e0:	80 93 32 01 	sts	0x0132, r24
		transmit(0b11101111);
 2e4:	8f ee       	ldi	r24, 0xEF	; 239
 2e6:	1b cf       	rjmp	.-458    	; 0x11e <transmit>
		break;
 2e8:	08 95       	ret
		default:
		if(status > 16)
 2ea:	e1 31       	cpi	r30, 0x11	; 17
 2ec:	f1 05       	cpc	r31, r1
 2ee:	3c f0       	brlt	.+14     	; 0x2fe <check+0x14a>
		{
			status = 16;
 2f0:	80 e1       	ldi	r24, 0x10	; 16
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	90 93 37 01 	sts	0x0137, r25
 2f8:	80 93 36 01 	sts	0x0136, r24
 2fc:	08 95       	ret
		}
		if(status < 0){
 2fe:	ff 23       	and	r31, r31
 300:	24 f4       	brge	.+8      	; 0x30a <check+0x156>
			status = 0;
 302:	10 92 37 01 	sts	0x0137, r1
 306:	10 92 36 01 	sts	0x0136, r1
 30a:	08 95       	ret

0000030c <__vector_5>:
		}
		break;
	}
}
ISR( INT4_vect )
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
	status++;
 31a:	80 91 36 01 	lds	r24, 0x0136
 31e:	90 91 37 01 	lds	r25, 0x0137
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 37 01 	sts	0x0137, r25
 328:	80 93 36 01 	sts	0x0136, r24
	PORTA ^= (1<<6);	// Toggle PORTA.7
 32c:	9b b3       	in	r25, 0x1b	; 27
 32e:	80 e4       	ldi	r24, 0x40	; 64
 330:	89 27       	eor	r24, r25
 332:	8b bb       	out	0x1b, r24	; 27
}
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <__vector_6>:
ISR( INT5_vect )
{
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1

}
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_7>:
ISR( INT6_vect )
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1

}
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_10>:

ISR( TIMER2_OVF_vect)
{
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
	TCNT2 = 0;
 378:	14 bc       	out	0x24, r1	; 36
	if(overflow > 4){
 37a:	80 91 34 01 	lds	r24, 0x0134
 37e:	90 91 35 01 	lds	r25, 0x0135
 382:	05 97       	sbiw	r24, 0x05	; 5
 384:	6c f0       	brlt	.+26     	; 0x3a0 <__vector_10+0x36>
		status--;
 386:	80 91 36 01 	lds	r24, 0x0136
 38a:	90 91 37 01 	lds	r25, 0x0137
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	90 93 37 01 	sts	0x0137, r25
 394:	80 93 36 01 	sts	0x0136, r24
		overflow = 0;
 398:	10 92 35 01 	sts	0x0135, r1
 39c:	10 92 34 01 	sts	0x0134, r1
	}
	PORTA ^= (1<<7);	// Toggle PORTA.7
 3a0:	8b b3       	in	r24, 0x1b	; 27
 3a2:	80 58       	subi	r24, 0x80	; 128
 3a4:	8b bb       	out	0x1b, r24	; 27
	overflow++;
 3a6:	80 91 34 01 	lds	r24, 0x0134
 3aa:	90 91 35 01 	lds	r25, 0x0135
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	90 93 35 01 	sts	0x0135, r25
 3b4:	80 93 34 01 	sts	0x0134, r24
}
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <main>:
int main( void )
{
	DDRA = 0b11111111;
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	8a bb       	out	0x1a, r24	; 26
	//enable interrupts op port E4 5 6
	EICRB |= 0b00111111;	// Interrupt 4,5 en 6 op rising edge
 3ca:	8a b7       	in	r24, 0x3a	; 58
 3cc:	8f 63       	ori	r24, 0x3F	; 63
 3ce:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0b01110000;	// Enable INT4, INT5, INT6
 3d0:	89 b7       	in	r24, 0x39	; 57
 3d2:	80 67       	ori	r24, 0x70	; 112
 3d4:	89 bf       	out	0x39, r24	; 57
	
	TCNT2 = 0;				// Preset value of counter 2
 3d6:	14 bc       	out	0x24, r1	; 36
	TIMSK |= (1<<6);		// T2 overflow interrupt enable
 3d8:	87 b7       	in	r24, 0x37	; 55
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00000101;		// Initialize T2: ext.counting, rising edge, run
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	85 bd       	out	0x25, r24	; 37


	twi_init();				// Init TWI interface
 3e2:	83 de       	rcall	.-762    	; 0xea <twi_init>
	// Init HT16K22. Page 32 datasheet
	transmit(0x21);			// Internal osc on (page 10 HT16K33)
 3e4:	81 e2       	ldi	r24, 0x21	; 33
 3e6:	9b de       	rcall	.-714    	; 0x11e <transmit>
	transmit(0xA0);			// HT16K33 pins all output
 3e8:	80 ea       	ldi	r24, 0xA0	; 160
 3ea:	99 de       	rcall	.-718    	; 0x11e <transmit>
	transmit(0b11101010);	//Display Dimming 8/16 duty cycle
 3ec:	8a ee       	ldi	r24, 0xEA	; 234
 3ee:	97 de       	rcall	.-722    	; 0x11e <transmit>
	transmit(0x81);			// Display OFF - Blink On
 3f0:	81 e8       	ldi	r24, 0x81	; 129
 3f2:	95 de       	rcall	.-726    	; 0x11e <transmit>
	
	status = 0;
 3f4:	10 92 37 01 	sts	0x0137, r1
 3f8:	10 92 36 01 	sts	0x0136, r1
	sei();
 3fc:	78 94       	sei
	while (1)
	{
		draw(smile);
 3fe:	80 91 32 01 	lds	r24, 0x0132
 402:	90 91 33 01 	lds	r25, 0x0133
 406:	aa de       	rcall	.-684    	; 0x15c <draw>
		check();
 408:	d5 de       	rcall	.-598    	; 0x1b4 <check>
	}
 40a:	f9 cf       	rjmp	.-14     	; 0x3fe <main+0x38>

0000040c <__tablejump2__>:
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	00 24       	eor	r0, r0
 412:	00 1c       	adc	r0, r0
 414:	0b be       	out	0x3b, r0	; 59
 416:	07 90       	elpm	r0, Z+
 418:	f6 91       	elpm	r31, Z
 41a:	e0 2d       	mov	r30, r0
 41c:	09 94       	ijmp

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
