
B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000196  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000013f  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b1  00000000  00000000  00000515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ab  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b3  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	42 c0       	rjmp	.+132    	; 0xae <__vector_10>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	33 d0       	rcall	.+102    	; 0x110 <main>
  aa:	3c c0       	rjmp	.+120    	; 0x124 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_10>:

int flip;
// Interrupt routine timer2 overflow
//
ISR( TIMER2_OVF_vect )
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	PORTD ^= 0x80;			// toggle portd.7
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	80 58       	subi	r24, 0x80	; 128
  c0:	82 bb       	out	0x12, r24	; 18
	if(flip)
  c2:	80 91 00 01 	lds	r24, 0x0100
  c6:	90 91 01 01 	lds	r25, 0x0101
  ca:	89 2b       	or	r24, r25
  cc:	39 f0       	breq	.+14     	; 0xdc <__vector_10+0x2e>
	{
		TCNT2 = 255-195;	// 15 ms
  ce:	8c e3       	ldi	r24, 0x3C	; 60
  d0:	84 bd       	out	0x24, r24	; 36
		flip = 0;
  d2:	10 92 01 01 	sts	0x0101, r1
  d6:	10 92 00 01 	sts	0x0100, r1
  da:	08 c0       	rjmp	.+16     	; 0xec <__vector_10+0x3e>
	}else
	{
		TCNT2 = 255-117;	// 25 ms
  dc:	8a e8       	ldi	r24, 0x8A	; 138
  de:	84 bd       	out	0x24, r24	; 36
		flip = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 01 01 	sts	0x0101, r25
  e8:	80 93 00 01 	sts	0x0100, r24
	}
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <timer2Init>:
// Initialize timer2
//
void timer2Init( void )
{
	flip = 0;				
  fa:	10 92 01 01 	sts	0x0101, r1
  fe:	10 92 00 01 	sts	0x0100, r1
	TCNT2 = 0;				// Preset value of counter 2
 102:	14 bc       	out	0x24, r1	; 36
	TIMSK |= (1<<6);		// T2 overflow interrupt enable
 104:	87 b7       	in	r24, 0x37	; 55
 106:	80 64       	ori	r24, 0x40	; 64
 108:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00000101;		// Initialize T2: ext.counting, rising edge, run
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	85 bd       	out	0x25, r24	; 37
 10e:	08 95       	ret

00000110 <main>:


// Main program: Counting on T2
int main( void )
{
	DDRD = 0x80;				// set PORTD.7 for input
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;				// set PORTA for output (shows countregister)
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;				// set PORTB for output (shows tenthvalue)
 118:	87 bb       	out	0x17, r24	; 23
	timer2Init();
 11a:	ef df       	rcall	.-34     	; 0xfa <timer2Init>
	SREG |= (1<<7);				// turn_on intr all
 11c:	8f b7       	in	r24, 0x3f	; 63
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8f bf       	out	0x3f, r24	; 63
	while (1)
	{
		
	}
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x12>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
