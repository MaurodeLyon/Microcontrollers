
B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001ac  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003f4  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000253  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a4  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d5  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001de  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	72 d0       	rcall	.+228    	; 0x198 <main>
  b4:	79 c0       	rjmp	.+242    	; 0x1a8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:

static void lcd_command ( unsigned char dat )
{
	//send a command to the LCD (like positioning the cursor)
	
	PORTC = dat & 0xF0;				// high nibble
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;			// data (RS=0),
  be:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	e9 ef       	ldi	r30, 0xF9	; 249
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
	// start (EN=1)
	_delay_ms(1);					// wait 1 ms
	PORTC = 0x04;					// stop (EN = 0)
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21
	
	PORTC = (dat & 0x0F) << 4;		// high nibble
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;			// data (RS=0),
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop
	// start (EN=1)
	_delay_ms(1);					// wait 1 ms
	PORTC = 0x00;					// stop // (EN=0 RS=0)
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <init>:


void init()
{
	//Initialise LCD
	DDRC = 0b11111111;	//Set PORTD to OUTPUT
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
	
	// return home
	lcd_command( 0x02 );
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	e2 df       	rcall	.-60     	; 0xb8 <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	de df       	rcall	.-68     	; 0xb8 <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	dc df       	rcall	.-72     	; 0xb8 <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	da cf       	rjmp	.-76     	; 0xb8 <lcd_command>
 104:	08 95       	ret

00000106 <display_text>:
	// start (EN=1)
	_delay_ms(1);					// wait 1 ms
	PORTC = 0x00;					// stop // (EN=0 RS=0)
}
void display_text(char *str)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	dc 01       	movw	r26, r24
 10c:	ec 01       	movw	r28, r24
	//Display an array of chars on the LCD
	
	//lcd_command(0x80);  <-- would clear the screen before writing again
	for (int i=0; i< strlen(str); i++)
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
	//Write a single character to the display
	PORTC = dat & 0xF0;				// high nibble
	PORTC = PORTC | 0x0C;			// data (RS=1),

	_delay_ms(1);					// wait 1 ms
	PORTC = 0x04;					// stop (EN = 0)
 112:	64 e0       	ldi	r22, 0x04	; 4
void display_text(char *str)
{
	//Display an array of chars on the LCD
	
	//lcd_command(0x80);  <-- would clear the screen before writing again
	for (int i=0; i< strlen(str); i++)
 114:	1f c0       	rjmp	.+62     	; 0x154 <display_text+0x4e>
	{
		lcd_writeChar( str[i] );
 116:	29 91       	ld	r18, Y+


static void lcd_writeChar( unsigned char dat )
{
	//Write a single character to the display
	PORTC = dat & 0xF0;				// high nibble
 118:	82 2f       	mov	r24, r18
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C;			// data (RS=1),
 11e:	95 b3       	in	r25, 0x15	; 21
 120:	9c 60       	ori	r25, 0x0C	; 12
 122:	95 bb       	out	0x15, r25	; 21
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <display_text+0x22>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <display_text+0x28>
 12e:	00 00       	nop

	_delay_ms(1);					// wait 1 ms
	PORTC = 0x04;					// stop (EN = 0)
 130:	65 bb       	out	0x15, r22	; 21
	
	PORTC = (dat & 0x0F) << 4;		// low nibble
 132:	90 e1       	ldi	r25, 0x10	; 16
 134:	29 9f       	mul	r18, r25
 136:	90 01       	movw	r18, r0
 138:	11 24       	eor	r1, r1
 13a:	25 bb       	out	0x15, r18	; 21
	PORTC = PORTC | 0x0C;			// data (RS=1),
 13c:	95 b3       	in	r25, 0x15	; 21
 13e:	9c 60       	ori	r25, 0x0C	; 12
 140:	95 bb       	out	0x15, r25	; 21
 142:	89 ef       	ldi	r24, 0xF9	; 249
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <display_text+0x40>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <display_text+0x46>
 14c:	00 00       	nop
	// start (EN=1)
	_delay_ms(1);					// wait 1 ms
	PORTC = 0x00;					// stop
 14e:	15 ba       	out	0x15, r1	; 21
void display_text(char *str)
{
	//Display an array of chars on the LCD
	
	//lcd_command(0x80);  <-- would clear the screen before writing again
	for (int i=0; i< strlen(str); i++)
 150:	4f 5f       	subi	r20, 0xFF	; 255
 152:	5f 4f       	sbci	r21, 0xFF	; 255
 154:	fd 01       	movw	r30, r26
 156:	01 90       	ld	r0, Z+
 158:	00 20       	and	r0, r0
 15a:	e9 f7       	brne	.-6      	; 0x156 <display_text+0x50>
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	ea 1b       	sub	r30, r26
 160:	fb 0b       	sbc	r31, r27
 162:	4e 17       	cp	r20, r30
 164:	5f 07       	cpc	r21, r31
 166:	b8 f2       	brcs	.-82     	; 0x116 <display_text+0x10>
	{
		lcd_writeChar( str[i] );
	}
	
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <set_cursor>:
void set_cursor(int position)
{
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	int i;
	for(i=0; i<position ; i++)
 176:	18 16       	cp	r1, r24
 178:	19 06       	cpc	r1, r25
 17a:	4c f4       	brge	.+18     	; 0x18e <set_cursor+0x20>
 17c:	8c 01       	movw	r16, r24
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0
	{
		lcd_command(0x14);		//This command tells the LCD to move its to the right by one. 
 182:	84 e1       	ldi	r24, 0x14	; 20
 184:	99 df       	rcall	.-206    	; 0xb8 <lcd_command>
	
}
void set_cursor(int position)
{
	int i;
	for(i=0; i<position ; i++)
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	c0 17       	cp	r28, r16
 18a:	d1 07       	cpc	r29, r17
 18c:	d1 f7       	brne	.-12     	; 0x182 <set_cursor+0x14>
								//It will be run until the preferred position is reached
		
	}
	//lcd_command(0x14);	
	//lcd_command(0xF);
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <main>:


int main(void)
{
	//Run the functions as a test.
	init();
 198:	a9 df       	rcall	.-174    	; 0xec <init>
	set_cursor(2);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	e7 df       	rcall	.-50     	; 0x16e <set_cursor>
	display_text("Paul4Preside");
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	b0 df       	rcall	.-160    	; 0x106 <display_text>
    while (1) 
    {
    }
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <main+0xe>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
