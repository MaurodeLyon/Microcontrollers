
B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a2  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000144  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a9  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a3  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00000897  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	13 d0       	rcall	.+38     	; 0xd0 <main>
  aa:	2f c0       	rjmp	.+94     	; 0x10a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
{
	TCNT2 = -10;	// Preset value
	counter++;			// Increment counter
	

}
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <main>:



int main(void)
{
	counter=0;
  d0:	10 92 01 01 	sts	0x0101, r1
  d4:	10 92 00 01 	sts	0x0100, r1
	DDRD=	~BIT(7); //Put PORTD.7 on INPUT
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;	//Set PORTA on OUTPUT.			
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;	//Set PORTB on OUTPUT.	
  e0:	87 bb       	out	0x17, r24	; 23
	
	
	TCNT2 = -10;				// Initialise the value the counter should hold
  e2:	86 ef       	ldi	r24, 0xF6	; 246
  e4:	84 bd       	out	0x24, r24	; 36
	TIMSK |= BIT(6);			// Enable the T2 overflow interrupt. This interrupt will launch when the counter reaches 0.
  e6:	87 b7       	in	r24, 0x37	; 55
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	87 bf       	out	0x37, r24	; 55
	SREG|= BIT(7);				//Turn on the interrupt for PORTD
  ec:	8f b7       	in	r24, 0x3f	; 63
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8f bf       	out	0x3f, r24	; 63
	TCCR2 = 0x07;				// Enable the counter in normal mode and start it
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	85 bd       	out	0x25, r24	; 37

    while (1) 
    {
		PORTA = TCNT2;			// show value counter 2 on PORTA LED's
		PORTB = counter;		// show value tenth counter on PORTB LED's
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d1 e0       	ldi	r29, 0x01	; 1
	SREG|= BIT(7);				//Turn on the interrupt for PORTD
	TCCR2 = 0x07;				// Enable the counter in normal mode and start it

    while (1) 
    {
		PORTA = TCNT2;			// show value counter 2 on PORTA LED's
  fa:	84 b5       	in	r24, 0x24	; 36
  fc:	8b bb       	out	0x1b, r24	; 27
		PORTB = counter;		// show value tenth counter on PORTB LED's
  fe:	88 81       	ld	r24, Y
 100:	88 bb       	out	0x18, r24	; 24
		wait(10);				// every 10 ms	
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	d3 df       	rcall	.-90     	; 0xae <wait>

    }
 108:	f8 cf       	rjmp	.-16     	; 0xfa <main+0x2a>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
