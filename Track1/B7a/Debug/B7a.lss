
B7a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000c6  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000081  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000173  00000000  00000000  0000034b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000152  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000699  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	42 c0       	rjmp	.+132    	; 0x120 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
int main(void)
{
	/* Replace with your application code */
	
	
	DDRC = 0b11111111;				// zet C naar output
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000000;				// zet D naar input
  a2:	11 ba       	out	0x11, r1	; 17
	typedef enum {START,S1,S2,S3,END} STATE;
	STATE state = END;
  a4:	84 e0       	ldi	r24, 0x04	; 4
			break;
			case S2:
				if(PIND & BIT(7)) state = START;
				if(PIND & BIT(6)) state = S1;
				if(PIND & BIT(5)) state = S3;
				PORTC = 0x4;
  a6:	24 e0       	ldi	r18, 0x04	; 4
				PORTC = 0x2;
			break;
			case S2:
				if(PIND & BIT(7)) state = START;
				if(PIND & BIT(6)) state = S1;
				if(PIND & BIT(5)) state = S3;
  a8:	73 e0       	ldi	r23, 0x03	; 3
				if(PIND & BIT(5)) state = S2;
				PORTC = 0x2;
			break;
			case S2:
				if(PIND & BIT(7)) state = START;
				if(PIND & BIT(6)) state = S1;
  aa:	41 e0       	ldi	r20, 0x01	; 1
				if(PIND & BIT(7)) state = START;
				if(PIND & BIT(5)) state = S2;
				PORTC = 0x2;
			break;
			case S2:
				if(PIND & BIT(7)) state = START;
  ac:	90 e0       	ldi	r25, 0x00	; 0
				PORTC = 0x4;
			break;
			case S3:
				if(PIND & BIT(7)) state = START;
				if(PIND & BIT(5) || PIND & BIT(6)) state = END;
				PORTC = 0x8;
  ae:	68 e0       	ldi	r22, 0x08	; 8
			break;
			case END:
				if(PIND & BIT(7)) state = START;
				PORTC = 0x10;
  b0:	50 e1       	ldi	r21, 0x10	; 16
				PORTC = 0x1;
			break;
			case S1:
				if(PIND & BIT(7)) state = START;
				if(PIND & BIT(5)) state = S2;
				PORTC = 0x2;
  b2:	32 e0       	ldi	r19, 0x02	; 2
	typedef enum {START,S1,S2,S3,END} STATE;
	STATE state = END;

	while (1)
	{
		switch (state)
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	e1 f0       	breq	.+56     	; 0xf0 <main+0x52>
  b8:	28 f4       	brcc	.+10     	; 0xc4 <main+0x26>
  ba:	88 23       	and	r24, r24
  bc:	41 f0       	breq	.+16     	; 0xce <main+0x30>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	61 f0       	breq	.+24     	; 0xda <main+0x3c>
  c2:	2c c0       	rjmp	.+88     	; 0x11c <main+0x7e>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	e1 f0       	breq	.+56     	; 0x100 <main+0x62>
  c8:	84 30       	cpi	r24, 0x04	; 4
  ca:	29 f1       	breq	.+74     	; 0x116 <main+0x78>
  cc:	27 c0       	rjmp	.+78     	; 0x11c <main+0x7e>
		{
			case START:
				if(PIND & BIT(6)) state = S1;
  ce:	80 b3       	in	r24, 0x10	; 16
  d0:	86 fb       	bst	r24, 6
  d2:	88 27       	eor	r24, r24
  d4:	80 f9       	bld	r24, 0
				PORTC = 0x1;
  d6:	45 bb       	out	0x15, r20	; 21
			break;
  d8:	21 c0       	rjmp	.+66     	; 0x11c <main+0x7e>
			case S1:
				if(PIND & BIT(7)) state = START;
  da:	80 b3       	in	r24, 0x10	; 16
				if(PIND & BIT(5)) state = S2;
  dc:	85 99       	sbic	0x10, 5	; 16
  de:	05 c0       	rjmp	.+10     	; 0xea <main+0x4c>
			case START:
				if(PIND & BIT(6)) state = S1;
				PORTC = 0x1;
			break;
			case S1:
				if(PIND & BIT(7)) state = START;
  e0:	80 95       	com	r24
  e2:	88 1f       	adc	r24, r24
  e4:	88 27       	eor	r24, r24
  e6:	88 1f       	adc	r24, r24
  e8:	01 c0       	rjmp	.+2      	; 0xec <main+0x4e>
				if(PIND & BIT(5)) state = S2;
  ea:	83 2f       	mov	r24, r19
				PORTC = 0x2;
  ec:	35 bb       	out	0x15, r19	; 21
			break;
  ee:	16 c0       	rjmp	.+44     	; 0x11c <main+0x7e>
			case S2:
				if(PIND & BIT(7)) state = START;
  f0:	87 99       	sbic	0x10, 7	; 16
  f2:	89 2f       	mov	r24, r25
				if(PIND & BIT(6)) state = S1;
  f4:	86 99       	sbic	0x10, 6	; 16
  f6:	84 2f       	mov	r24, r20
				if(PIND & BIT(5)) state = S3;
  f8:	85 99       	sbic	0x10, 5	; 16
  fa:	87 2f       	mov	r24, r23
				PORTC = 0x4;
  fc:	25 bb       	out	0x15, r18	; 21
			break;
  fe:	0e c0       	rjmp	.+28     	; 0x11c <main+0x7e>
			case S3:
				if(PIND & BIT(7)) state = START;
 100:	87 99       	sbic	0x10, 7	; 16
 102:	89 2f       	mov	r24, r25
				if(PIND & BIT(5) || PIND & BIT(6)) state = END;
 104:	85 99       	sbic	0x10, 5	; 16
 106:	04 c0       	rjmp	.+8      	; 0x110 <main+0x72>
 108:	86 9b       	sbis	0x10, 6	; 16
 10a:	03 c0       	rjmp	.+6      	; 0x112 <main+0x74>
 10c:	82 2f       	mov	r24, r18
 10e:	01 c0       	rjmp	.+2      	; 0x112 <main+0x74>
 110:	82 2f       	mov	r24, r18
				PORTC = 0x8;
 112:	65 bb       	out	0x15, r22	; 21
			break;
 114:	03 c0       	rjmp	.+6      	; 0x11c <main+0x7e>
			case END:
				if(PIND & BIT(7)) state = START;
 116:	87 99       	sbic	0x10, 7	; 16
 118:	89 2f       	mov	r24, r25
				PORTC = 0x10;
 11a:	55 bb       	out	0x15, r21	; 21
			break;
		}
		PIND = 0;
 11c:	90 bb       	out	0x10, r25	; 16
	}
 11e:	ca cf       	rjmp	.-108    	; 0xb4 <main+0x16>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
