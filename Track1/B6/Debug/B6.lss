
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000017e  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011a  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000019b  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019e  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	41 c0       	rjmp	.+130    	; 0x11e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
	return 1;
}

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	28 17       	cp	r18, r24
  ba:	39 07       	cpc	r19, r25
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <main>:
#include <util/delay.h>
void wait(int ms);

int main(void)
{
	DDRD = 0b11111111;				// zet D naar output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;				// zet C naar input
  c4:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x0;					// zet port D op 0
  c6:	12 ba       	out	0x12, r1	; 18
	int toggle = 0;					// maak toggle
	int T2W = 10;					// time to wait
  c8:	0a e0       	ldi	r16, 0x0A	; 10
  ca:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{
	DDRD = 0b11111111;				// zet D naar output
	DDRC = 0b00000000;				// zet C naar input
	PORTD = 0x0;					// zet port D op 0
	int toggle = 0;					// maak toggle
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (PINC & 0x1)		{			// registreer button press
			if(toggle == 0)
			{
				toggle = 1;
				T2W = 500;				// 1 keer per seconden knipperen
  d0:	0f 2e       	mov	r0, r31
  d2:	f4 ef       	ldi	r31, 0xF4	; 244
  d4:	7f 2e       	mov	r7, r31
  d6:	f0 2d       	mov	r31, r0
  d8:	88 24       	eor	r8, r8
  da:	83 94       	inc	r8
	while (1)
	{
		if (PINC & 0x1)		{			// registreer button press
			if(toggle == 0)
			{
				toggle = 1;
  dc:	99 24       	eor	r9, r9
  de:	93 94       	inc	r9
  e0:	a1 2c       	mov	r10, r1
				T2W = 500;				// 1 keer per seconden knipperen
			}
			else
			{
				toggle = 0;
				T2W = 250;				// 2 keer per seconden knipperen
  e2:	0f 2e       	mov	r0, r31
  e4:	fa ef       	ldi	r31, 0xFA	; 250
  e6:	bf 2e       	mov	r11, r31
  e8:	f0 2d       	mov	r31, r0
  ea:	c1 2c       	mov	r12, r1
				toggle = 1;
				T2W = 500;				// 1 keer per seconden knipperen
			}
			else
			{
				toggle = 0;
  ec:	d1 2c       	mov	r13, r1
  ee:	e1 2c       	mov	r14, r1
				T2W = 250;				// 2 keer per seconden knipperen
			}
		}
		wait(T2W);
		PORTD ^= 0x40;					// toggle portD bit7
  f0:	68 94       	set
  f2:	ff 24       	eor	r15, r15
  f4:	f6 f8       	bld	r15, 6
	int toggle = 0;					// maak toggle
	int T2W = 10;					// time to wait
	int pressed = 0;
	while (1)
	{
		if (PINC & 0x1)		{			// registreer button press
  f6:	98 9b       	sbis	0x13, 0	; 19
  f8:	0b c0       	rjmp	.+22     	; 0x110 <main+0x50>
			if(toggle == 0)
  fa:	cd 2b       	or	r28, r29
  fc:	29 f0       	breq	.+10     	; 0x108 <main+0x48>
				T2W = 500;				// 1 keer per seconden knipperen
			}
			else
			{
				toggle = 0;
				T2W = 250;				// 2 keer per seconden knipperen
  fe:	0b 2d       	mov	r16, r11
 100:	1c 2d       	mov	r17, r12
				toggle = 1;
				T2W = 500;				// 1 keer per seconden knipperen
			}
			else
			{
				toggle = 0;
 102:	cd 2d       	mov	r28, r13
 104:	de 2d       	mov	r29, r14
 106:	04 c0       	rjmp	.+8      	; 0x110 <main+0x50>
	{
		if (PINC & 0x1)		{			// registreer button press
			if(toggle == 0)
			{
				toggle = 1;
				T2W = 500;				// 1 keer per seconden knipperen
 108:	07 2d       	mov	r16, r7
 10a:	18 2d       	mov	r17, r8
	while (1)
	{
		if (PINC & 0x1)		{			// registreer button press
			if(toggle == 0)
			{
				toggle = 1;
 10c:	c9 2d       	mov	r28, r9
 10e:	da 2d       	mov	r29, r10
			{
				toggle = 0;
				T2W = 250;				// 2 keer per seconden knipperen
			}
		}
		wait(T2W);
 110:	80 2f       	mov	r24, r16
 112:	91 2f       	mov	r25, r17
 114:	c4 df       	rcall	.-120    	; 0x9e <wait>
		PORTD ^= 0x40;					// toggle portD bit7
 116:	22 b3       	in	r18, 0x12	; 18
 118:	2f 25       	eor	r18, r15
 11a:	22 bb       	out	0x12, r18	; 18
		
	}
 11c:	ec cf       	rjmp	.-40     	; 0xf6 <main+0x36>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
