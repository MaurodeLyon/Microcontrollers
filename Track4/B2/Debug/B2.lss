
B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ab  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e3  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f7  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000137b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	9d d0       	rcall	.+314    	; 0x1e4 <main>
  aa:	bb c0       	rjmp	.+374    	; 0x222 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
	
}
// Set pulse width for BLUE on pin PB5, 0=max, 255=off
void setBlue( unsigned char blue)
{
	OCR1A=blue;	
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	e9 ef       	ldi	r30, 0xF9	; 249
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <timer1Init>:
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9b bd       	out	0x2b, r25	; 43
  d6:	8a bd       	out	0x2a, r24	; 42
  d8:	99 bd       	out	0x29, r25	; 41
  da:	88 bd       	out	0x28, r24	; 40
  dc:	90 93 79 00 	sts	0x0079, r25
  e0:	80 93 78 00 	sts	0x0078, r24
  e4:	89 ea       	ldi	r24, 0xA9	; 169
  e6:	8f bd       	out	0x2f, r24	; 47
  e8:	8b e0       	ldi	r24, 0x0B	; 11
  ea:	8e bd       	out	0x2e, r24	; 46
  ec:	08 95       	ret

000000ee <fadeRed>:
	
}

void fadeRed()
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
	//SLowly turn on the red LED
	for(int red = 255 ; red >=0 ; red-=2)
  f2:	cf ef       	ldi	r28, 0xFF	; 255
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	ce 01       	movw	r24, r28
  f8:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=max, 255=off
void setRed( unsigned char red )
{
	OCR1B = red;
  fa:	99 bd       	out	0x29, r25	; 41
  fc:	88 bd       	out	0x28, r24	; 40
{
	//SLowly turn on the red LED
	for(int red = 255 ; red >=0 ; red-=2)
	{
		setRed(red);
		wait(250);
  fe:	8a ef       	ldi	r24, 0xFA	; 250
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	d5 df       	rcall	.-86     	; 0xae <wait>
}

void fadeRed()
{
	//SLowly turn on the red LED
	for(int red = 255 ; red >=0 ; red-=2)
 104:	22 97       	sbiw	r28, 0x02	; 2
 106:	cf 3f       	cpi	r28, 0xFF	; 255
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	d8 07       	cpc	r29, r24
 10c:	a1 f7       	brne	.-24     	; 0xf6 <fadeRed+0x8>
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	ce 01       	movw	r24, r28
 114:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=max, 255=off
void setRed( unsigned char red )
{
	OCR1B = red;
 116:	99 bd       	out	0x29, r25	; 41
 118:	88 bd       	out	0x28, r24	; 40
	}
	//Slowly turn off the red LED
	for(int red = 0 ; red <=255 ; red+=2)
	{
		setRed(red);
		wait(500);
 11a:	84 ef       	ldi	r24, 0xF4	; 244
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	c7 df       	rcall	.-114    	; 0xae <wait>
	{
		setRed(red);
		wait(250);
	}
	//Slowly turn off the red LED
	for(int red = 0 ; red <=255 ; red+=2)
 120:	22 96       	adiw	r28, 0x02	; 2
 122:	c1 15       	cp	r28, r1
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	d8 07       	cpc	r29, r24
 128:	a1 f7       	brne	.-24     	; 0x112 <fadeRed+0x24>
}

// Set pulse width for RED on pin PB5, 0=max, 255=off
void setRed( unsigned char red )
{
	OCR1B = red;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	99 bd       	out	0x29, r25	; 41
 130:	88 bd       	out	0x28, r24	; 40
		wait(500);
	}
	//Turn of
	setRed(255);
	
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <fadeGreen>:
void fadeGreen()
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
	//Slowly turn on the green LED
	for(int green = 255 ; green >=0 ; green-=2)
 140:	cf ef       	ldi	r28, 0xFF	; 255
 142:	d0 e0       	ldi	r29, 0x00	; 0
	OCR1B = red;
}
// Set pulse width for GREEN on pin PB5, 0=max, 255=off
void setGreen( unsigned char green)
{
	OCR1C=green;	
 144:	08 e7       	ldi	r16, 0x78	; 120
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	ce 01       	movw	r24, r28
 14a:	99 27       	eor	r25, r25
 14c:	f8 01       	movw	r30, r16
 14e:	91 83       	std	Z+1, r25	; 0x01
 150:	80 83       	st	Z, r24
{
	//Slowly turn on the green LED
	for(int green = 255 ; green >=0 ; green-=2)
	{
		setGreen(green);
		wait(250);
 152:	8a ef       	ldi	r24, 0xFA	; 250
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ab df       	rcall	.-170    	; 0xae <wait>
	
}
void fadeGreen()
{
	//Slowly turn on the green LED
	for(int green = 255 ; green >=0 ; green-=2)
 158:	22 97       	sbiw	r28, 0x02	; 2
 15a:	cf 3f       	cpi	r28, 0xFF	; 255
 15c:	ff ef       	ldi	r31, 0xFF	; 255
 15e:	df 07       	cpc	r29, r31
 160:	99 f7       	brne	.-26     	; 0x148 <fadeGreen+0x10>
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
	OCR1B = red;
}
// Set pulse width for GREEN on pin PB5, 0=max, 255=off
void setGreen( unsigned char green)
{
	OCR1C=green;	
 166:	08 e7       	ldi	r16, 0x78	; 120
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	ce 01       	movw	r24, r28
 16c:	99 27       	eor	r25, r25
 16e:	f8 01       	movw	r30, r16
 170:	91 83       	std	Z+1, r25	; 0x01
 172:	80 83       	st	Z, r24
	}
	//Slowly turn off the green LED
	for(int green = 0 ; green <=255 ; green+=2)
	{
		setGreen(green);
		wait(500);
 174:	84 ef       	ldi	r24, 0xF4	; 244
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	9a df       	rcall	.-204    	; 0xae <wait>
	{
		setGreen(green);
		wait(250);
	}
	//Slowly turn off the green LED
	for(int green = 0 ; green <=255 ; green+=2)
 17a:	22 96       	adiw	r28, 0x02	; 2
 17c:	c1 15       	cp	r28, r1
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	df 07       	cpc	r29, r31
 182:	99 f7       	brne	.-26     	; 0x16a <fadeGreen+0x32>
	OCR1B = red;
}
// Set pulse width for GREEN on pin PB5, 0=max, 255=off
void setGreen( unsigned char green)
{
	OCR1C=green;	
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 79 00 	sts	0x0079, r25
 18c:	80 93 78 00 	sts	0x0078, r24
		setGreen(green);
		wait(500);
	}
	//Turn off the green LED
	setGreen(255);
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <fadeBlue>:

void fadeBlue()
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
	//Slowly turn on the blue LED
	for(int blue = 255 ; blue >=0 ; blue-=2)
 19e:	cf ef       	ldi	r28, 0xFF	; 255
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	ce 01       	movw	r24, r28
 1a4:	99 27       	eor	r25, r25
	
}
// Set pulse width for BLUE on pin PB5, 0=max, 255=off
void setBlue( unsigned char blue)
{
	OCR1A=blue;	
 1a6:	9b bd       	out	0x2b, r25	; 43
 1a8:	8a bd       	out	0x2a, r24	; 42
{
	//Slowly turn on the blue LED
	for(int blue = 255 ; blue >=0 ; blue-=2)
	{
		setBlue(blue);
		wait(250);
 1aa:	8a ef       	ldi	r24, 0xFA	; 250
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	7f df       	rcall	.-258    	; 0xae <wait>
}

void fadeBlue()
{
	//Slowly turn on the blue LED
	for(int blue = 255 ; blue >=0 ; blue-=2)
 1b0:	22 97       	sbiw	r28, 0x02	; 2
 1b2:	cf 3f       	cpi	r28, 0xFF	; 255
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	d8 07       	cpc	r29, r24
 1b8:	a1 f7       	brne	.-24     	; 0x1a2 <fadeBlue+0x8>
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	ce 01       	movw	r24, r28
 1c0:	99 27       	eor	r25, r25
	
}
// Set pulse width for BLUE on pin PB5, 0=max, 255=off
void setBlue( unsigned char blue)
{
	OCR1A=blue;	
 1c2:	9b bd       	out	0x2b, r25	; 43
 1c4:	8a bd       	out	0x2a, r24	; 42
	}
	//Slowly turn off the blue LED
	for(int blue = 0 ; blue <=255 ; blue+=2)
	{
		setBlue(blue);
		wait(500);
 1c6:	84 ef       	ldi	r24, 0xF4	; 244
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	71 df       	rcall	.-286    	; 0xae <wait>
	{
		setBlue(blue);
		wait(250);
	}
	//Slowly turn off the blue LED
	for(int blue = 0 ; blue <=255 ; blue+=2)
 1cc:	22 96       	adiw	r28, 0x02	; 2
 1ce:	c1 15       	cp	r28, r1
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	d8 07       	cpc	r29, r24
 1d4:	a1 f7       	brne	.-24     	; 0x1be <fadeBlue+0x24>
	
}
// Set pulse width for BLUE on pin PB5, 0=max, 255=off
void setBlue( unsigned char blue)
{
	OCR1A=blue;	
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	9b bd       	out	0x2b, r25	; 43
 1dc:	8a bd       	out	0x2a, r24	; 42
		setBlue(blue);
		wait(500);
	}
	//Turn off the blue LED
	setBlue(255);
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <main>:

// Main program: Counting on T1
int main( void )
{
	DDRB = 0xFF;					// set PORTB for compare output
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	87 bb       	out	0x17, r24	; 23
	timer1Init();					//Initialise the timer
 1e8:	73 df       	rcall	.-282    	; 0xd0 <timer1Init>
	wait(100);
 1ea:	84 e6       	ldi	r24, 0x64	; 100
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	5f df       	rcall	.-322    	; 0xae <wait>
}

// Set pulse width for RED on pin PB5, 0=max, 255=off
void setRed( unsigned char red )
{
	OCR1B = red;
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
}
// Set pulse width for GREEN on pin PB5, 0=max, 255=off
void setGreen( unsigned char green)
{
	OCR1C=green;	
 1f4:	08 e7       	ldi	r16, 0x78	; 120
 1f6:	10 e0       	ldi	r17, 0x00	; 0
}

// Set pulse width for RED on pin PB5, 0=max, 255=off
void setRed( unsigned char red )
{
	OCR1B = red;
 1f8:	d9 bd       	out	0x29, r29	; 41
 1fa:	c8 bd       	out	0x28, r28	; 40
	
}
// Set pulse width for BLUE on pin PB5, 0=max, 255=off
void setBlue( unsigned char blue)
{
	OCR1A=blue;	
 1fc:	db bd       	out	0x2b, r29	; 43
 1fe:	ca bd       	out	0x2a, r28	; 42
	OCR1B = red;
}
// Set pulse width for GREEN on pin PB5, 0=max, 255=off
void setGreen( unsigned char green)
{
	OCR1C=green;	
 200:	f8 01       	movw	r30, r16
 202:	d1 83       	std	Z+1, r29	; 0x01
 204:	c0 83       	st	Z, r28
		//Turn off LED's
		setRed( 255 );		
		setBlue( 255 );
		setGreen( 255 );
		
		fadeRed();
 206:	73 df       	rcall	.-282    	; 0xee <fadeRed>
		fadeGreen();
 208:	97 df       	rcall	.-210    	; 0x138 <fadeGreen>
		fadeBlue();
 20a:	c7 df       	rcall	.-114    	; 0x19a <fadeBlue>
}

// Set pulse width for RED on pin PB5, 0=max, 255=off
void setRed( unsigned char red )
{
	OCR1B = red;
 20c:	d9 bd       	out	0x29, r29	; 41
 20e:	c8 bd       	out	0x28, r28	; 40
	
}
// Set pulse width for BLUE on pin PB5, 0=max, 255=off
void setBlue( unsigned char blue)
{
	OCR1A=blue;	
 210:	db bd       	out	0x2b, r29	; 43
 212:	ca bd       	out	0x2a, r28	; 42
	OCR1B = red;
}
// Set pulse width for GREEN on pin PB5, 0=max, 255=off
void setGreen( unsigned char green)
{
	OCR1C=green;	
 214:	f8 01       	movw	r30, r16
 216:	d1 83       	std	Z+1, r29	; 0x01
 218:	c0 83       	st	Z, r28
		//Turn off LED's
		setRed( 255 );
		setBlue( 255 );
		setGreen( 255 );

		wait(100);
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	47 df       	rcall	.-370    	; 0xae <wait>

	}
 220:	eb cf       	rjmp	.-42     	; 0x1f8 <main+0x14>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
