
B3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001a8  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000145  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000205  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a0  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	18 d0       	rcall	.+48     	; 0xca <main>
  9a:	60 c0       	rjmp	.+192    	; 0x15c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e9 ef       	ldi	r30, 0xF9	; 249
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	28 17       	cp	r18, r24
  ba:	39 07       	cpc	r19, r25
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <adcInit>:


// Initialize ADC: 10-bits (left justified), free running
void adcInit( void )
{
	ADMUX = 0b01000001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
  c0:	81 e4       	ldi	r24, 0x41	; 65
  c2:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
  c4:	86 ee       	ldi	r24, 0xE6	; 230
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	08 95       	ret

000000ca <main>:
}

// Main program: ADC at PF1
int main( void )
{
	DDRF = 0x00;				// set PORTF for input (ADC)
  ca:	10 92 61 00 	sts	0x0061, r1
	DDRA = 0xFF;				// set PORTA for output
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;				// set PORTB for output
  d2:	87 bb       	out	0x17, r24	; 23
	adcInit();					// initialize ADC
  d4:	f5 df       	rcall	.-22     	; 0xc0 <adcInit>
		{
			PORTB = 0b01111111;
		}
		else if( number > 35)// <100
		{
			PORTB = 0b11111111;
  d6:	cc 24       	eor	r12, r12
  d8:	ca 94       	dec	r12
		{
			PORTB = 0b00111111;
		}
		else if (number < 35)//87.5-100
		{
			PORTB = 0b01111111;
  da:	0f 2e       	mov	r0, r31
  dc:	ff e7       	ldi	r31, 0x7F	; 127
  de:	df 2e       	mov	r13, r31
  e0:	f0 2d       	mov	r31, r0
		{
			PORTB = 0b00011111;
		}
		else if (number < 30)//62.5-75
		{
			PORTB = 0b00111111;
  e2:	0f 2e       	mov	r0, r31
  e4:	ff e3       	ldi	r31, 0x3F	; 63
  e6:	ef 2e       	mov	r14, r31
  e8:	f0 2d       	mov	r31, r0
		{
			PORTB = 0b00001111;
		}
		else if (number < 25)//50-62.5
		{
			PORTB = 0b00011111;
  ea:	0f 2e       	mov	r0, r31
  ec:	ff e1       	ldi	r31, 0x1F	; 31
  ee:	ff 2e       	mov	r15, r31
  f0:	f0 2d       	mov	r31, r0
		{
			PORTB = 0b00000111;
		}
		else if (number < 20)//37.5-50
		{
			PORTB = 0b00001111;
  f2:	0f e0       	ldi	r16, 0x0F	; 15
		else if (number < 10)//12.5-25
		{
			PORTB = 0b00000011;
		}else if (number <15)//25-37.5
		{
			PORTB = 0b00000111;
  f4:	17 e0       	ldi	r17, 0x07	; 7
		{
			PORTB = 0b00000001;
		}
		else if (number < 10)//12.5-25
		{
			PORTB = 0b00000011;
  f6:	d3 e0       	ldi	r29, 0x03	; 3
		{
			PORTB = 0b00000001;
		}
		else if ( number < 5)//0 - 12.5
		{
			PORTB = 0b00000001;
  f8:	c1 e0       	ldi	r28, 0x01	; 1
	DDRB = 0xFF;				// set PORTB for output
	adcInit();					// initialize ADC

	while (1)
	{
		wait(100);				// every 100 ms (busy waiting)
  fa:	84 e6       	ldi	r24, 0x64	; 100
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	cf df       	rcall	.-98     	; 0x9e <wait>
		int number = ADCL;
 100:	84 b1       	in	r24, 0x04	; 4
 102:	90 e0       	ldi	r25, 0x00	; 0
		if( number < 1)
 104:	18 16       	cp	r1, r24
 106:	19 06       	cpc	r1, r25
 108:	14 f0       	brlt	.+4      	; 0x10e <main+0x44>
		{
			PORTB = 0b00000001;
 10a:	c8 bb       	out	0x18, r28	; 24
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <main+0x30>
		}
		else if ( number < 5)//0 - 12.5
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	91 05       	cpc	r25, r1
 112:	14 f4       	brge	.+4      	; 0x118 <main+0x4e>
		{
			PORTB = 0b00000001;
 114:	c8 bb       	out	0x18, r28	; 24
 116:	f1 cf       	rjmp	.-30     	; 0xfa <main+0x30>
		}
		else if (number < 10)//12.5-25
 118:	8a 30       	cpi	r24, 0x0A	; 10
 11a:	91 05       	cpc	r25, r1
 11c:	14 f4       	brge	.+4      	; 0x122 <main+0x58>
		{
			PORTB = 0b00000011;
 11e:	d8 bb       	out	0x18, r29	; 24
 120:	ec cf       	rjmp	.-40     	; 0xfa <main+0x30>
		}else if (number <15)//25-37.5
 122:	8f 30       	cpi	r24, 0x0F	; 15
 124:	91 05       	cpc	r25, r1
 126:	14 f4       	brge	.+4      	; 0x12c <main+0x62>
		{
			PORTB = 0b00000111;
 128:	18 bb       	out	0x18, r17	; 24
 12a:	e7 cf       	rjmp	.-50     	; 0xfa <main+0x30>
		}
		else if (number < 20)//37.5-50
 12c:	84 31       	cpi	r24, 0x14	; 20
 12e:	91 05       	cpc	r25, r1
 130:	14 f4       	brge	.+4      	; 0x136 <main+0x6c>
		{
			PORTB = 0b00001111;
 132:	08 bb       	out	0x18, r16	; 24
 134:	e2 cf       	rjmp	.-60     	; 0xfa <main+0x30>
		}
		else if (number < 25)//50-62.5
 136:	89 31       	cpi	r24, 0x19	; 25
 138:	91 05       	cpc	r25, r1
 13a:	14 f4       	brge	.+4      	; 0x140 <main+0x76>
		{
			PORTB = 0b00011111;
 13c:	f8 ba       	out	0x18, r15	; 24
 13e:	dd cf       	rjmp	.-70     	; 0xfa <main+0x30>
		}
		else if (number < 30)//62.5-75
 140:	8e 31       	cpi	r24, 0x1E	; 30
 142:	91 05       	cpc	r25, r1
 144:	14 f4       	brge	.+4      	; 0x14a <main+0x80>
		{
			PORTB = 0b00111111;
 146:	e8 ba       	out	0x18, r14	; 24
 148:	d8 cf       	rjmp	.-80     	; 0xfa <main+0x30>
		}
		else if (number < 35)//87.5-100
 14a:	83 32       	cpi	r24, 0x23	; 35
 14c:	91 05       	cpc	r25, r1
 14e:	14 f4       	brge	.+4      	; 0x154 <main+0x8a>
		{
			PORTB = 0b01111111;
 150:	d8 ba       	out	0x18, r13	; 24
 152:	d3 cf       	rjmp	.-90     	; 0xfa <main+0x30>
		}
		else if( number > 35)// <100
 154:	84 97       	sbiw	r24, 0x24	; 36
 156:	8c f2       	brlt	.-94     	; 0xfa <main+0x30>
		{
			PORTB = 0b11111111;
 158:	c8 ba       	out	0x18, r12	; 24
 15a:	cf cf       	rjmp	.-98     	; 0xfa <main+0x30>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
